To compile the daemon, use

gcc -o dmxd dmxd.c -lusb

To use it, you'll need to connect the USB device (K8062/VM116), wait a few
seconds so the kernel can detect it then start the daemon. It'll run until
instructed by a client to shut down.

The client should then attach the Shared Memory segment by the following
code :

    int *shm, *channels, shmid;

    shmid=shmget(0x56444D58,sizeof(int)*522,0666);
    shm=(int *)shmat(shmid,NULL,0);
    channels=shm+10;

To use the daemon, you need to change the values in the channels[512] array.
To change DMX channel 15 to 127, use channels[14]=127. At the time, there is
an update every 25ms.

To change the greatest channel number used, use *shm=maxchan;

To request a client shutdown, use *(shm+1)=1;. This can be convenient if
your client take care of starting the daemon. When requested to shut down
that way, the daemon will free the Shared Memory segment.

+0          Number of channels
+1          Shutdown (set to non-null)
+2          Extra capabilities (flags)
+3
+4
+5
+6
+7
+8
+9
+10         Channels data 1 .. 512
...
+521

You may also use the included helper file dmx.c which defines 2 functions 
and a few variables. In order to use it, you need to include "dmx.h" in the
files which need to access the DMX data.

dmx_open()            Initialize connexion with the Daemon and the various
                      related variables
releaseSHM()          Close the connexion with the Daemon
int *dmx_maxchannels  Pointer to the number of channels
int *dmx_shutdown     Pointer to the shutdown-daemon
int *dmx_caps         Pointer to the capabilities
int dmx_channels[512] Channels values dmx_channels[0]...dmx_channels[511] 

When more functionnalities will be added, flags will be set in dmx_caps.
Before using some optionnal functionnality you will need to check that the
daemon supports them by checking the flags. More functions will be added to the
helper files as the project will grow.
